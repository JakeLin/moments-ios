# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

default_platform(:ios)

platform :ios do
  # Development
  desc "Lint code"
  lane :lint_code do
    puts("Lint code using SwfitLint")
    swiftlint(
      mode: :lint,
      executable: "./Pods/SwiftLint/swiftlint",  # The SwiftLint binary path (optional). Important if you've installed it via CocoaPods
      config_file: './Moments/.swiftlint.yml',
      raise_if_swiftlint_error: true)
  end

  desc "Lint and format code"
  lane :format_code do
    puts("Lint and format code using SwfitLint")
    swiftlint(
      mode: :autocorrect,
      executable: "./Pods/SwiftLint/swiftlint",  # The SwiftLint binary path (optional). Important if you've installed it via CocoaPods
      config_file: './Moments/.swiftlint.yml',
      raise_if_swiftlint_error: true)
  end

  desc "Sort Xcode project files"
  lane :sort_files do
    puts("Sort the files for the Xcode project")
    sh "../scripts/sort-Xcode-project-file.pl ../Moments/Moments.xcodeproj"
  end

  # Test
  desc "Run unit tests"
  lane :tests do
    puts("Run the tests")
    run_tests(
      scheme: "Moments", 
      output_directory: "./fastlane/dist", 
      output_types: "html", 
      buildlog_path: "./fastlane/dist")
  end

  # Profile
  desc "Downlad certificates and profiles"
  lane :download_profiles do
    keychain_name = "TemporaryKeychain"
    keychain_password = SecureRandom.base64

    create_keychain(
      name: keychain_name,
      password: keychain_password,
      default_keychain: true,
      timeout: 3600,
      unlock: true,
    )

    match(
      type: "adhoc",
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: "https://github.com/JakeLin/moments-codesign",
      app_identifier: "com.ibanimatable.moments.internal",
      team_id: "6HLFCRTYQU"
    )

    match(
      type: "appstore",
      readonly: true,
      keychain_name: keychain_name,
      keychain_password: keychain_password,
      storage_mode: "git",
      git_url: "https://github.com/JakeLin/moments-codesign",
      app_identifier: "com.ibanimatable.moments",
      team_id: "6HLFCRTYQU"
    )    
  end

  # Archive
  desc 'Creates an archive of the Internal app for testing'
  lane :archive_internal do
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "Moments/Moments.xcodeproj",
      code_sign_identity: "iPhone Distribution",
      bundle_identifier: "com.ibanimatable.moments.internal",
      profile_name: "match AdHoc com.ibanimatable.moments.internal")

    increment_version_number(
      bump_type: "patch"
    )
  
    puts("Create an archive for Internal testing")
    gym(scheme: "Moments-Internal",
      workspace: "Moments.xcworkspace",
      export_method: "ad-hoc",
      xcargs: "-allowProvisioningUpdates")

    update_code_signing_settings(
      use_automatic_signing: true,
      path: "Moments/Moments.xcodeproj")
  end

  desc 'Creates an archive of the Production app with Appstore distribution'
  lane :archive_appstore do
    update_code_signing_settings(
      use_automatic_signing: false,
      path: "Moments/Moments.xcodeproj",
      code_sign_identity: "iPhone Distribution",
      bundle_identifier: "com.ibanimatable.moments",
      profile_name: "match AppStore com.ibanimatable.moments")

    increment_version_number(
      bump_type: "patch"
    )

    puts("Create an archive for AppStore submission")
    gym(scheme: "Moments-AppStore",
      workspace: "Moments.xcworkspace",
      export_method: "app-store",
      xcargs: "-allowProvisioningUpdates")

   update_code_signing_settings(
      use_automatic_signing: true,
        path: "Moments/Moments.xcodeproj")
  end

  # Deploy
  desc 'Deploy the Internal app to TestFlight'
  lane :deploy_internal do
    api_key = get_app_store_connect_api_key_for_internal
    upload_to_testflight(
      api_key: api_key,
      app_identifier: "com.ibanimatable.moments.internal"
    )
  end

  desc 'Deploy the Production app to App Store'
  lane :deploy_appstore do
    api_key = get_app_store_connect_api_key_for_appstore
    upload_to_app_store(
      api_key: api_key,
      app_identifier: "com.ibanimatable.moments",
      skip_metadata: true,
      skip_screenshots: true,
      precheck_include_in_app_purchases: false,
    )
  end

  desc 'Get App Store Connect API key'
  private_lane :get_app_store_connect_api_key_for_internal do
    key_content = ENV["APP_STORE_CONNECT_API_CONTENT"]  # Make sure setting this environment variable before call this lane.
    api_key = app_store_connect_api_key(
      key_id: "9228D47ZD2",
      issuer_id: "69a6de7b-13fb-47e3-e053-5b8c7c11a4d1",
      key_content: "-----BEGIN EC PRIVATE KEY-----\n" + key_content + "\n-----END EC PRIVATE KEY-----",
      duration: 1200,
      in_house: false
    )

    api_key 
  end

  private_lane :get_app_store_connect_api_key_for_appstore do
    # The key needs to have App Manager role, see https://github.com/fastlane/fastlane/issues/17066
    key_content = ENV["APP_STORE_CONNECT_API_CONTENT_FOR_APPSTORE"]  # Make sure setting this environment variable before call this lane.
    api_key = app_store_connect_api_key(
      key_id: "D9B979RR69",
      issuer_id: "69a6de7b-13fb-47e3-e053-5b8c7c11a4d1",
      key_content: "-----BEGIN EC PRIVATE KEY-----\n" + key_content + "\n-----END EC PRIVATE KEY-----",
      duration: 1200,
      in_house: false
    )

    api_key 
  end
end
